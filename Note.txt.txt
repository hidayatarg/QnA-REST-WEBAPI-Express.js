Building API
-Creating a question
-Read the question
-Answer a question
-Read the answer
-Edit an answer
-Delete an answer
-Vote on answer


Planing:
two object 
Question<<<<<<<<<>>>>>>>>Answer
Create			Create
Read 			Read
			Delete
			Vote




Planning Routes: (for Questions)
GET	- 	/questions      (No answer if no questions)
POST	- 	/questions 
GET	- 	/questions/:id	(Specific question with id)


*API answers belong to questions (Parent-Child-Relationships)
POST	-	/questions/:id/answer
GET	-	/questions/:id/answer/:id
PUT	-	/questions/:id/answer/:id
DELETE	-	/questions/:id/answer/:id


Vote route 
-Vote Up	POST - /questions/:qID/answers/:aID/vote-up
-Vote Down	POST - /questions/:qID/answers/aID/vote-down


#npm init --yes
#npm i express@~4.13 --save
Setup the express App

NOTE:
An Express application is similar to a conveyor belt 
receiving requests at one end, and sending responses from the other.
middleware function
app.use(function(req, res, next){});
next(); function mustbe called once the work is finished (next)
*If next is never called the response cycle will never finish.



```
'use strict';
var express=require('express');
var app=express();

app.use( function (req, res, next){
	consol.log('first middleware');
	next();
});

app.use('/different/:id',function (req, res, next){
	consol.log('Second middle ware, ID:', req.params.id);
	next();
});

var port=process.env.PORT || 3000;

app.listen(port,function(){
    console.log('Express server is listening on port:', port);
});
```


```
'use strict';
var express=require('express');
var app=express();

app.use( function (req, res, next){
	req.myMessage="Hello, Middleware #"
	next();
});

app.use(function (req, res, next){
	consol.log(req.myMessage);
	next();
});

var port=process.env.PORT || 3000;

app.listen(port,function(){
    console.log('Express server is listening on port:', port);
});
```

Express access to query strings
```
'use strict';
var express=require('express');
var app=express();


app.use(function (req, res, next){
	console.log('The leave on trees are', req.query.color);
	next();
});

var port=process.env.PORT || 3000;

app.listen(port,function(){
    console.log('Express server is listening on port:', port);
});
```

We need a request of (localhost:3000/?color=green) fire the upper code
URL parameters are available within middleware: req.params



#install Body Parser a middleware already written
#npm i --save body-parser@~1.15

The first middleware cannot access to the request body property
```
'use strict';
var express=require('express');
var app=express();
var jsonParser= require('body-parser').json;

app.use(function (req, res, next) {
    if(req.body){
        console.log('The Sky is', req.body.color);
    }else{
        console.log('There is no body property on the request');
    }
    next();
});

//when app recieve a request this middleware will
//the body. make it accessable from the request body property
app.use(jsonParser());

app.use(function (req, res, next) {
    if (req.body) {
        console.log('The Sky is', req.body.color);
    } else {
        console.log('There is no body property on the request');
    }
    next();
});

var port=process.env.PORT || 3000;

app.listen(port,function(){
    console.log('Express server is listening on port:', port);
});
```

Refactor the code
